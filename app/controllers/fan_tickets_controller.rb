require 'paypal-sdk-rest'
require 'net/http'
include PayPal::SDK::REST

class FanTicketsController < ApplicationController
  before_action :authorize_account, only: [:create, :create_many, :start_purchase, :destroy, :by_event, :show]
  before_action :auth_user, only: [:finish_yandex]
  before_action :set_ticket, only: [:create, :create_many]
  before_action :check_ticket, only: [:create, :create_many]
  before_action :set_fan_ticket, only: [:show, :destroy]
  swagger_controller :fan_ticket, "FanTickets"

  TOKEN_SALT = 'fssdjfi293j29 fsdjd f_ sjfsk jsdf9 sf9j s9'

  # GET /fan_tickets
  swagger_api :index do
    summary "Retrieve list of fan tickets"
    param :query, :account_id, :integer, :required, "Fan account id"
    param_list :query, :time, :string, :optional, "Tickets time frame", ['current', 'past']
    param :query, :limit, :integer, :optional, "Limit"
    param :query, :offset, :integer, :optional, "Offset"
    param :header, 'Authorization', :string, :required, 'Authentication token'
    response :unauthorized
    response :not_found
  end
  def index
    @events = Event.available.joins(:tickets => :fan_tickets).where(
      fan_tickets: {account_id: params[:account_id]}
    )
    if params[:time]
      filter_by_time
    end
    @events = @events.group("events.id")


    render json: @events.limit(params[:limit]).offset(params[:offset]), fan_ticket: true, account_id: params[:account_id], status: :ok
  end

  # GET /fan_tickets/by_event
  swagger_api :by_event do
    summary "Bought tickets by event"
    param :query, :account_id, :integer, :required, "Fan account id"
    param :query, :event_id, :integer, :required, "Event id"
    param :header, 'Authorization', :string, :required, 'Authentication token'
    response :unauthorized
    response :not_found
  end
  def by_event
    render json: {
      event: Event.find(params[:event_id]),
      tickets: FanTicket.joins(:ticket).where(account_id: params[:account_id], tickets: {event_id: params[:event_id]})
    }, fan_ticket: true, account_id: params[:account_id], user: @user, with_tickets: true, by_event: true, status: :ok
  end

  # GET /fan_tickets/1
  swagger_api :show do
    summary "Fan ticket info"
    param :path, :id, :integer, :required, "FanTicket id"
    param :query, :account_id, :integer, :required, "Fan account id"
    param :header, 'Authorization', :string, :required, 'Authentication token'
    response :unauthorized
    response :not_found
  end
  def show
    render json: @fan_ticket, user: @user, status: :ok
  end

  # POST /fan_tickets/start_purchase
  swagger_api :start_purchase do
    summary "Buy ticket"
    param_list :form, :platform, :string, :required, "Platform", ["yandex", "paypal"]
    param :form, :account_id, :integer, :required, "Fan account id"
    param :form, :tickets, :string, :required, 'Array of tickets [{"ticket_id": 1, "count": 5}, ...]'
    param :form, :redirect_url, :string, :required, "Redirect after success purchase"
    param :form, :payment_token, :string, :optional, "Payment token generated by YKassa"
    param :form, :payment_method_id, :string, :optional, "Payment method from saved card generated by YKassa"
    param :header, 'Authorization', :string, :required, 'Authentication token'
    response :unauthorized
    response :unprocessable_entity
    response :forbidden
  end
  def start_purchase
    @tickets = []
    @transaction = nil
    @payment_id = nil
    @url = nil

    params[:tickets].each do |param|
      ticket = Ticket.find(param[:ticket_id])
      if not ticket 
        render status: :not_found and return 
      else
        count = param[:count] != nil ? [100, param[:count].to_i].min : 1
        sold_tickets = FanTicket.where(ticket_id: ticket.id)
        if sold_tickets and sold_tickets.count + count > ticket.count
          render json: {ticket: :TICKETS_SOLD, ticket_id: ticket.id}, status: :unprocessable_entity and return 
        end
        
        @tickets << {ticket: ticket, count: count}
      end
    end

    if @tickets.collect{|t|t[:ticket].id}.uniq.count != @tickets.collect{|t|t[:ticket].id}.count
      render json: {ticket: :DUPLICATE}, status: :unprocessable_entity and return 
    end

    if @tickets.collect{|t|t[:ticket].event_id}.uniq.count != 1
      render json: {ticket: :DIFFERENT_EVENTS}, status: :unprocessable_entity and return 
    end

    if not @tickets[0][:ticket].event.status == "active"
      render json: {ticket_event: :NOT_ACTIVE}, status: :unprocessable_entity and return
    end

    price = @tickets.sum{|t| t[:count] * t[:ticket].price}

    if params[:platform] == "paypal"
      @payment = Payment.new({
          intent:  "sale",
          payer:  {
            payment_method:  "paypal" 
          },
          redirect_urls: {
            return_url: params[:redirect_url],
            cancel_url: "http://localhost:3000/"
          },
          transactions:  [{
            item_list: {
              items: [{
                name: "fan_ticket",
                sku: "fan_ticket",
                price: price,
                currency: @tickets[0][:ticket].currency,
                quantity: 1 
                }
              ]
            },
            amount: {
              total: price,
              currency: @tickets[0][:ticket].currency 
            },
            description: "Buy ticket" }
          ]
      })
        
      if @payment.create
        @transaction = @payment.id
        @url = @payment.links.select{|l| l.rel == 'approval_url'}.first.href
      else
        render json: @payment.error and return
      end
    elsif params[:platform] == "yandex"
      price_in_rub = CurrencyHelper.convert(price, @tickets[0][:ticket].currency, "RUB")
      idempotence_key = SecureRandom.uuid

      data = {
        "amount": {
          "value": price_in_rub,
          "currency": "RUB"
        },
        "save_payment_method": true,
        "description": "Tikets for #{@tickets[0][:ticket].event.name} from account_id: #{@account.id}",
      }
      if params[:payment_method_id]
        data[:payment_method_id] = params[:payment_method_id]
      elsif params[:payment_token]
        data[:payment_token] = params[:payment_token]
        data[:confirmation] = {
          "type": "redirect",
          "return_url": "#{params[:redirect_url]}?payment_id=#{idempotence_key}"
        }
      else
        data[:payment_method_data] = {
          "type": "bank_card"
        }
        data[:confirmation] = {
          "type": "redirect",
          "return_url": "#{params[:redirect_url]}?payment_id=#{idempotence_key}"
        }
      end

      uri = URI.parse(Rails.configuration.ykassa_uri)
      response = eval(ykassa_send_post(uri, idempotence_key, data))

      if response[:type] == "error"
        render :json => response, status: :unprocessable_entity and return
      elsif response
        @transaction = idempotence_key
        @payment_id = response[:id]
        if response[:confirmation]
          @url = response[:confirmation][:confirmation_url]
        end
      else
        render status: :ok and return
      end
    else
      render status: :unprocessable_entity and return
    end   

    @tickets.each do |ticket|
      attempt = PurchaseAttempt.new(
        account_id: @account.id, 
        status: :pending, 
        purchase_type: :fan_ticket, 
        platform: params[:platform],
        price: ticket[:ticket].price,
        transaction_id: @transaction,
        purchase_payment_id: @payment_id,
        purchase_item_id: ticket[:ticket].id,
        count: ticket[:count],
        token: '')
      attempt.save
    end
    render json: {transaction_id: @transaction, url: @url}
  end

  # GET /fan_tickets/finish_paypal
  swagger_api :finish_paypal do
    summary "Finish paypal payment, call it after success redirect"
    param :query, :paymentId, :string, :required, "PaymentId"
    response :unauthorized
    response :unprocessable_entity
    response :forbidden
  end
  def finish_paypal
    @attempts = PurchaseAttempt.where(
      status: :pending, 
      purchase_type: :fan_ticket, 
      transaction_id: params[:paymentId]
    )
    if @attempts.count == 0
      render json: {purchase_attempt: :NOT_FOUND}, status: :not_found and return
    end
    res = []
    PurchaseAttempt.transaction do 
      @payment = Payment.find(params[:paymentId])
      if @payment.execute(payer_id: @payment.payer.payer_info.payer_id)
      else 
        raise ActiveRecord::Rollback
        render json: @payment.error and return
      end
      @attempts.each do |attempt|
        @attempt = attempt
        if @attempt
          @ticket = Ticket.find(@attempt.purchase_item_id)

          count = @attempt.count != nil ? @attempt.count : 1

          cnt = 0
          while cnt < count do
            @fan_ticket = FanTicket.new(account_id: @attempt.account_id, ticket_id: @ticket.id)
            @fan_ticket.price = @ticket.price
            @fan_ticket.currency = @ticket.currency
            @fan_ticket.code = params[:paymentId]

            cnt += 1
            if @fan_ticket.save
              res << @fan_ticket
            else
              render json: @fan_ticket.errors, status: :unprocessable_entity and return
              res.each do |ticket|
                ticket.destroy
              end
              raise ActiveRecord::Rollback
              return
            end
          end
        else
          raise ActiveRecord::Rollback
          render json: {purchase_attempt: :NOT_FOUND}, status: :not_found and return
        end
      end
      if @attempt
        @attempt.status = :finished
        @attempt.save
        render json: res
      end
    end
  end

  # GET /fan_tickets/finish_yandex
  swagger_api :finish_yandex do
    summary "Finish yandex payment, call it after success redirect"
    param :query, :paymentId, :string, :required, "PaymentId"
    param :header, 'Authorization', :string, :required, 'Authentication token'
    response :unauthorized
    response :unprocessable_entity
    response :forbidden
  end
  def finish_yandex
    @attempts = PurchaseAttempt.where(
      status: :pending,
      purchase_type: :fan_ticket,
      transaction_id: params[:paymentId]
    )
    if @attempts.count == 0
      render json: {purchase_attempt: :NOT_FOUND}, status: :not_found and return
    end

    # check status in kassa
    payment_id = @attempts[0].purchase_payment_id
    uri = URI.parse("#{Rails.configuration.ykassa_uri}/#{payment_id}")
    response = eval(ykassa_send_get(uri))
    if response[:status] == "waiting_for_capture"
      data = response[:amount]

      idempotence_key = SecureRandom.uuid
      uri = URI.parse("#{Rails.configuration.ykassa_uri}/#{payment_id}/capture")
      response = eval(ykassa_send_post(uri, idempotence_key, data))
      if response[:status] == "succeeded"
        PurchaseAttempt.transaction do
          res = []
          @attempts.each do |attempt|
            @attempt = attempt
            if @attempt
              @ticket = Ticket.find(@attempt.purchase_item_id)

              count = @attempt.count != nil ? @attempt.count : 1

              cnt = 0
              while cnt < count do
                @fan_ticket = FanTicket.new(account_id: @attempt.account_id, ticket_id: @ticket.id)
                @fan_ticket.price = @ticket.price
                @fan_ticket.currency = @ticket.currency
                @fan_ticket.code = SecureRandom.uuid

                cnt += 1
                if @fan_ticket.save
                  res << @fan_ticket
                else
                  render json: @fan_ticket.errors, status: :unprocessable_entity and return
                  res.each do |ticket|
                    ticket.destroy
                  end
                  raise ActiveRecord::Rollback
                  return
                end
              end
            else
              raise ActiveRecord::Rollback
              render json: {purchase_attempt: :NOT_FOUND}, status: :not_found and return
            end
          end
          if @attempt
            @attempt.status = :finished
            @attempt.save

            if response[:payment_method][:saved]
              @user.payment_method_id = response[:payment_method][:id]
              @user.payment_method_title = response[:payment_method][:title]
              @user.save
            end

            render json: res, status: :ok
          end
        end
      else
        render :json => response, status: :unprocessable_entity
      end
    end
  end

  # POST /fan_tickets
  swagger_api :create do
    summary "Buy ticket"
    param :form, :account_id, :integer, :required, "Fan account id"
    param :form, :ticket_id, :integer, :required, "Ticket id"
    param :header, 'Authorization', :string, :required, 'Authentication token'
    response :unauthorized
    response :unprocessable_entity
    response :forbidden
  end
  def create
    if @ticket.event.status == "active"
      @fan_ticket = FanTicket.new(fan_ticket_params)

      # TODO: временный фикс, пока фронт не начнет передавать нормально, или перестанет вообще это юзать
      #unless @fan_ticket.price
      @fan_ticket.price = @ticket.price
      @fan_ticket.currency = @ticket.currency
      #end
      @fan_ticket.code = generate_auth_code

      if @fan_ticket.save
        render json: @fan_ticket, status: :created
      else
        render json: @fan_ticket.errors, status: :unprocessable_entity
      end
    else
      render status: :forbidden and return
    end
  end

   # POST /fan_tickets
  swagger_api :create_many do
    summary "Buy tickets"
    param :form, :account_id, :integer, :required, "Fan account id"
    param :form, :ticket_id, :integer, :required, "Ticket id"
    param :form, :count, :integer, :required, "Count of tickets"
    param :header, 'Authorization', :string, :required, 'Authentication token'
    response :unauthorized
    response :unprocessable_entity
    response :forbidden
  end
  def create_many
    code = generate_auth_code
    count = params[:count] != nil ? [100, params[:count].to_i].min : 1
    if @ticket.event.status == "active"
      cnt = 0
      res = []
      while cnt < count do
        @fan_ticket = FanTicket.new(fan_ticket_params)
        @fan_ticket.code = code
        @fan_ticket.price = @ticket.price
        @fan_ticket.currency = @ticket.currency

        cnt += 1
        if @fan_ticket.save
          res << @fan_ticket
        else
          render json: @fan_ticket.errors, status: :unprocessable_entity
          res.each do |ticket|
            ticket.destroy
          end
          return
        end
      end
      render json: res
    else
      render status: :forbidden
    end
  end

  # GET /fan_tickets/search
  swagger_api :search do
    summary "Search in account tickets"
    param :query, :account_id, :integer, :required, "Fan account id"
    param_list :query, :time, :string, :required, "Tickets time frame", ['current', 'past']
    param :query, :genres, :string, :optional, "Array of genres"
    param :query, :ticket_types, :string, :optional, "Array of ticket types"
    param :query, :location, :string, :optional, "Location of event"
    param :query, :date_from, :datetime, :optional, "Event date from"
    param :query, :date_to, :datetime, :optional, "Event date to"
    param :query, :limit, :integer, :optional, "Limit"
    param :query, :offset, :integer, :optional, "Offset"
    param :header, 'Authorization', :string, :required, 'Authentication token'
    response :unauthorized
    response :unprocessable_entity
    response :forbidden
  end
  def search
    @events = Event.joins(:tickets => :fan_tickets).where(
      fan_tickets: {account_id: params[:account_id]}
    )

    search_time
    search_genres
    search_types
    search_location
    search_date

    @events = @events.group("events.id")
    render json: @events.limit(params[:limit]).offset(params[:offset]), fan_ticket: true, account_id: params[:account_id], user: @user, status: :ok
  end

  # DELETE /fan_tickets/1
  swagger_api :destroy do
    summary "Return ticket"
    param :path, :id, :integer, :required, "Ticket id"
    param :form, :account_id, :integer, :required, "Fan account id"
    param :header, 'Authorization', :string, :required, 'Authentication token'
    response :unauthorized
    response :unprocessable_entity
  end
  def destroy
    @fan_ticket.destroy
    render status: :ok
  end

  private
    def set_fan_ticket
      @fan_ticket = FanTicket.find(params[:id])
    end

    def set_ticket
      @ticket = Ticket.find(params[:ticket_id])
    end

    def filter_by_time
      if params[:time] == 'current'
        @events = @events.where(
          "(events.exact_date_to >= :date OR events.date_to IS NULL)", {:date => DateTime.now}
        )
      else
        @events = @events.where(
          "events.exact_date_to < :date", {:date => DateTime.now}
        )
      end
    end

    def check_ticket
      sold_tickets = FanTicket.where(ticket_id: @ticket.id)

      if sold_tickets and sold_tickets.count >= @ticket.count
        render status: :forbidden
      end
    end

    def generate_auth_code
      return '0000'
    end

    def search_time
      if params[:time] == 'current'
        @events = @events.where(
          "(events.exact_date_from >= :date OR events.exact_date_from IS NULL)", {:date => DateTime.now}
        ).group("events.id")
      else
        @events = @events.where(
          "events.exact_date_from < :date", {:date => DateTime.now}
        ).group("events.id")
      end
    end

    def search_genres
      if params[:genres]
        genres = []
        params[:genres].each do |genre|
          genres.append(EventGenre.genres[genre])
        end
        @events = @events.joins(:genres).where(:event_genres => {genre: genres})
      end
    end

    def search_types
      if params[:ticket_types]
        types = []
        params[:ticket_types].each do |type|
          types.append(TicketsType.names[type])
        end
        @events = @events.joins(:tickets => :tickets_type).where(:tickets_types => {name: types})
      end
    end

    def search_location
      if params[:location]
        @events = @events.near(params[:location])
      end
    end

    def search_date
      if params[:from_date]
        @events = @events.where("events.exact_date_from >= :date",
                                {:date => DateTime.parse(params[:from_date])})
      end
      if params[:to_date]
        @events = @events.where("events.exact_date_to <= :date",
                                {:date => DateTime.parse(params[:to_date])})
      end
    end

    def fan_ticket_params
      params.permit(:ticket_id, :account_id)
    end

    def authorize_account
      @account = AuthorizeHelper.auth_and_set_account(request, params[:account_id])
      if @account == nil or @account.account_type != 'fan'
        render json: {error: "Access forbidden"}, status: :forbidden and return
      end

      @user = @account.user
    end

    def auth_user
      @user = AuthorizeHelper.authorize(request)

      if @user == nil
        render json: {error: "Access forbidden"}, status: :forbidden and return
      end
    end

    def ykassa_send_post(uri, idempotence_key, data)
      header = {"Content-Type" => "application/json", "Idempotence-Key" => idempotence_key}
      https = Net::HTTP.new(uri.host, uri.port)
      https.use_ssl = true

      req = Net::HTTP::Post.new(uri.path, header)
      req.basic_auth "#{ENV['YKASSA_LOGIN']}:#{ENV['YKASSA_PASSWORD']}", ''
      req.body = data.to_json
      res = https.request(req)

      res.body
    end

  def ykassa_send_get(uri)
    header = {"Content-Type" => "application/json"}
    https = Net::HTTP.new(uri.host, uri.port)
    https.use_ssl = true

    req = Net::HTTP::Get.new(uri.path, header)
    req.basic_auth "#{ENV['YKASSA_LOGIN']}:#{ENV['YKASSA_PASSWORD']}", ''
    res = https.request(req)

    res.body
  end
end
